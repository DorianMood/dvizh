{"version":3,"sources":["img/persik.png","panels/Persik.js","panels/ProjectCard.js","panels/ProjectCardList.js","App.js","index.js"],"names":["module","exports","platform","ProjectCard","props","project","size","before","description","style","display","location","name","asideContent","Math","round","price","bottomContent","mode","marginLeft","GET_PROJECTS","gql","ProjectCardList","useQuery","loading","error","data","api","window","vkMiniAppAPI","message","getUserInfo","then","userInfo","console","log","id","catch","e","separator","header","projects","map","index","key","client","ApolloClient","uri","fetchOptions","VKMiniAppAPI","initApp","App","useState","activeStory","setActiveStory","setActivePanel","setUser","setPopout","useEffect","a","bridge","send","user","subscribe","detail","type","schemeAttribute","document","createAttribute","value","scheme","body","attributes","setNamedItem","fetchData","go","currentTarget","dataset","to","onStoryChange","story","content","tabbar","onClick","selected","data-story","text","activePanel","ReactDOM","render","getElementById"],"mappings":"mFAAAA,EAAOC,QAAU,IAA0B,oC,6qBCY5BC,c,wFC2BAC,GA/BAD,cAEK,SAAAE,GAAU,IAElBC,EAAYD,EAAZC,QAER,OACI,kBAAC,IAAD,CAAMC,KAAK,KACP,kBAAC,IAAD,CACIC,OAAQ,kBAAC,IAAD,CAAQD,KAAM,IAAI,kBAAC,IAAD,OAC1BA,KAAK,IACLE,YAAa,yBAAKC,MAAO,CAAEC,QAAS,SAAU,kBAAC,IAAD,MAAgBL,EAAQM,SAASC,MAC3FC,aAAc,6BAAK,kBAAC,IAAD,MAAsBC,KAAKC,MAAMV,EAAQW,QAChDC,cACI,oCACI,6BAAMZ,EAAQG,aACd,yBAAKC,MAAO,CAAEC,QAAS,SACnB,kBAAC,IAAD,CAAQJ,KAAK,KAAb,oDACA,kBAAC,IAAD,CAAQA,KAAK,IAAIY,KAAK,YAAYT,MAAO,CAAEU,WAAY,IAAvD,2CAIdd,EAAQO,S,oTClBPV,cAAf,IAEMkB,EAAeC,YAAH,KAkDHC,EAjCS,SAAAlB,GAAU,IAAD,EACImB,YAASH,GAAlCI,EADqB,EACrBA,QAASC,EADY,EACZA,MAAOC,EADK,EACLA,KAClBC,EAAMC,OAAOC,aAEnB,OAAIL,EAAiB,yCACjBC,EAAa,UAAN,OAAiBA,EAAMK,UAElCH,EAAII,cAAcC,MAAK,SAAAC,GACnBC,QAAQC,IAAIF,EAASG,OACtBC,OAAM,SAAAC,GACLJ,QAAQC,IAAIG,MAIZ,kBAAC,IAAD,CAAOF,GAAIhC,EAAMgC,IACb,kBAAC,IAAD,CAAOG,UAAU,OAAOC,OAAQ,kBAAC,IAAD,CAAYjC,OAAQ,kBAAC,IAAD,OAApB,uEAC5B,kBAAC,IAAD,KAEQmB,EAAKe,SAASC,KAAI,SAACrC,EAASsC,GAAV,OACd,kBAAC,EAAD,CAAaC,IAAKD,EAAOtC,QAASA,YChCxDwC,EAAS,IAAIC,IAAa,CAC/BC,IAAK,mCACLC,aAAc,CACb9B,KAAM,aAIFS,EAAM,IAAIsB,eAChBtB,EAAIuB,UACJtB,OAAOC,aAAeF,EAEtB,IA4EewB,EA5EH,WAAO,IAAD,EACqBC,mBAAS,eAD9B,mBACVC,EADU,KACGC,EADH,OAEqBF,mBAAS,eAF9B,mBAEGG,GAFH,aAGcH,mBAAS,MAHvB,mBAGGI,GAHH,aAIWJ,mBAAS,kBAAC,IAAD,CAAe9C,KAAK,WAJxC,mBAIFmD,GAJE,WAMjBC,qBAAU,WAAM,4CAQf,4BAAAC,EAAA,sEACoBC,IAAOC,KAAK,uBADhC,OACOC,EADP,OAECN,EAAQM,GACRL,EAAU,MAHX,4CARe,sBACfG,IAAOG,WAAU,YAAiC,IAAD,IAA7BC,OAAUC,EAAmB,EAAnBA,KAAMvC,EAAa,EAAbA,KACnC,GAAa,yBAATuC,EAAiC,CACpC,IAAMC,EAAkBC,SAASC,gBAAgB,UACjDF,EAAgBG,MAAQ3C,EAAK4C,OAAS5C,EAAK4C,OAAS,eACpDH,SAASI,KAAKC,WAAWC,aAAaP,OALzB,mCAafQ,KACE,IAEH,IAAMC,EAAK,SAAArC,GACViB,EAAejB,EAAEsC,cAAcC,QAAQC,KAGlCC,EAAgB,SAAAzC,GACrBgB,EAAehB,EAAEsC,cAAcC,QAAQG,QAGxC,OACC,oCACC,0BACCpE,KAAK,WACLqE,QAAQ,gGAET,kBAAC,IAAD,CAAgBpC,OAAQA,GACvB,kBAAC,IAAD,CAAMQ,YAAaA,EAAa6B,OAC/B,kBAAC,IAAD,KACC,kBAAC,IAAD,CACCC,QAASJ,EACTK,SAA0B,gBAAhB/B,EACVgC,aAAW,cACXC,KAAK,sBACL,kBAAC,IAAD,OACD,kBAAC,IAAD,CACCH,QAASJ,EACTK,SAA0B,kBAAhB/B,EACVgC,aAAW,gBACXC,KAAK,kCACL,kBAAC,IAAD,OACD,kBAAC,IAAD,CACCH,QAASJ,EACTK,SAA0B,qBAAhB/B,EACVgC,aAAW,mBACXC,KAAK,wCACL,kBAAC,IAAD,SAIF,kBAAC,IAAD,CAAMlD,GAAG,cAAcmD,YAAY,YAClC,kBAAC,EAAD,CAAiBnD,GAAG,WAAWuC,GAAIA,KAEpC,kBAAC,IAAD,CAAMvC,GAAG,gBAAgBmD,YAAY,YACpC,kBAAC,EAAD,CAAiBnD,GAAG,WAAWuC,GAAIA,KAEpC,kBAAC,IAAD,CAAMvC,GAAG,mBAAmBmD,YAAY,YACvC,kBAAC,EAAD,CAAiBnD,GAAG,WAAWuC,GAAIA,SCxFzCf,IAAOC,KAAK,gBAGZ2B,IAASC,OAAO,kBAAC,EAAD,MAAStB,SAASuB,eAAe,W","file":"static/js/main.52738b11.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/persik.4e1ec840.png\";","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { platform, IOS } from '@vkontakte/vkui';\nimport Panel from '@vkontakte/vkui/dist/components/Panel/Panel';\nimport PanelHeader from '@vkontakte/vkui/dist/components/PanelHeader/PanelHeader';\nimport PanelHeaderButton from '@vkontakte/vkui/dist/components/PanelHeaderButton/PanelHeaderButton';\nimport Icon28ChevronBack from '@vkontakte/icons/dist/28/chevron_back';\nimport Icon24Back from '@vkontakte/icons/dist/24/back';\n\nimport persik from '../img/persik.png';\nimport './Persik.css';\n\nconst osName = platform();\n\nconst Persik = props => (\n\t<Panel id={props.id}>\n\t\t<PanelHeader\n\t\t\tleft={<PanelHeaderButton onClick={props.go} data-to=\"home\">\n\t\t\t\t{osName === IOS ? <Icon28ChevronBack /> : <Icon24Back />}\n\t\t\t</PanelHeaderButton>}\n\t\t>\n\t\t\tPersik\n\t\t</PanelHeader>\n\t\t<img className=\"Persik\" src={persik} alt=\"Persik The Cat\" />\n\t</Panel>\n);\n\nPersik.propTypes = {\n\tid: PropTypes.string.isRequired,\n\tgo: PropTypes.func.isRequired,\n};\n\nexport default Persik;\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { platform, IOS, Card, Cell, Button, Avatar } from '@vkontakte/vkui';\r\nimport Icon24User from '@vkontakte/icons/dist/24/user';\r\nimport Icon16Place from '@vkontakte/icons/dist/16/place';\r\nimport Icon24MoneyCircle from '@vkontakte/icons/dist/24/money_circle';\r\n\r\n\r\nconst osName = platform();\r\n\r\nconst ProjectCard = props => {\r\n\r\n    const { project } = props;\r\n\r\n    return (\r\n        <Card size=\"l\">\r\n            <Cell\r\n                before={<Avatar size={32}><Icon24User /></Avatar>}\r\n                size=\"l\"\r\n                description={<div style={{ display: 'flex' }}><Icon16Place />{project.location.name}</div>}\r\n    asideContent={<div><Icon24MoneyCircle />{Math.round(project.price)}</div>}\r\n                bottomContent={\r\n                    <>\r\n                        <div>{project.description}</div>\r\n                        <div style={{ display: 'flex' }}>\r\n                            <Button size=\"m\">Добавить</Button>\r\n                            <Button size=\"m\" mode=\"secondary\" style={{ marginLeft: 8 }}>Скрыть</Button>\r\n                        </div>\r\n                    </>\r\n                }\r\n            >{project.name}</Cell>\r\n        </Card>\r\n    );\r\n}\r\n\r\nProjectCard.propTypes = {\r\n    project: PropTypes.any.isRequired\r\n};\r\n\r\nexport default ProjectCard;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { platform, IOS, Panel, Header, Group, CardGrid, CellButton } from '@vkontakte/vkui';\r\nimport { gql } from 'apollo-boost';\r\nimport { useQuery } from '@apollo/react-hooks';\r\n\r\nimport Icon24Sort from '@vkontakte/icons/dist/24/sort';\r\n\r\nimport ProjectCard from './ProjectCard';\r\n\r\n\r\n\r\nconst osName = platform();\r\n\r\nconst GET_PROJECTS = gql`\r\n    {\r\n        projects(id: \"123\") {\r\n            id\r\n            name\r\n            description\r\n            price\r\n            location {\r\n                lat\r\n                lng\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\n\r\nconst ProjectCardList = props => {\r\n    const { loading, error, data } = useQuery(GET_PROJECTS);\r\n    const api = window.vkMiniAppAPI;\r\n\r\n    if (loading) return (<p>loading...</p>);\r\n    if (error) return `Error! ${error.message}`;\r\n\r\n    api.getUserInfo().then(userInfo => {\r\n        console.log(userInfo.id);\r\n    }).catch(e => {\r\n        console.log(e)\r\n    });\r\n\r\n    return (\r\n        <Panel id={props.id}>\r\n            <Group separator=\"hide\" header={<CellButton before={<Icon24Sort />}>Фильтровать</CellButton>}>\r\n                <CardGrid>\r\n                    {\r\n                        data.projects.map((project, index) => (\r\n                            <ProjectCard key={index} project={project} />\r\n                        ))\r\n                    }\r\n                </CardGrid>\r\n            </Group>\r\n        </Panel>\r\n    );\r\n}\r\n\r\nProjectCardList.propTypes = {\r\n    id: PropTypes.string.isRequired,\r\n    go: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ProjectCardList;\r\n","import React, { useState, useEffect } from 'react';\nimport bridge from '@vkontakte/vk-bridge';\nimport View from '@vkontakte/vkui/dist/components/View/View';\nimport ScreenSpinner from '@vkontakte/vkui/dist/components/ScreenSpinner/ScreenSpinner';\nimport '@vkontakte/vkui/dist/vkui.css';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport ApolloClient from 'apollo-boost';\nimport { VKMiniAppAPI } from '@vkontakte/vk-mini-apps-api';\n\nimport Icon28BombOutline from '@vkontakte/icons/dist/28/bomb_outline';\nimport Icon28PlaceOutline from '@vkontakte/icons/dist/28/place_outline';\nimport Icon28GhostOutline from '@vkontakte/icons/dist/28/ghost_outline';\n\nimport Home from './panels/Home';\nimport Persik from './panels/Persik';\nimport ProjectCardList from './panels/ProjectCardList';\nimport { Tabbar, TabbarItem, Epic } from '@vkontakte/vkui';\n\nconst client = new ApolloClient({\n\turi: 'https://dvizh-api.herokuapp.com/',\n\tfetchOptions: {\n\t\tmode: 'no-cors',\n\t},\n})\n\nconst api = new VKMiniAppAPI();\napi.initApp();\nwindow.vkMiniAppAPI = api;\n\nconst App = () => {\n\tconst [activeStory, setActiveStory] = useState('projects-my');\n\tconst [activePanel, setActivePanel] = useState('projects-my');\n\tconst [fetchedUser, setUser] = useState(null);\n\tconst [popout, setPopout] = useState(<ScreenSpinner size='large' />);\n\n\tuseEffect(() => {\n\t\tbridge.subscribe(({ detail: { type, data } }) => {\n\t\t\tif (type === 'VKWebAppUpdateConfig') {\n\t\t\t\tconst schemeAttribute = document.createAttribute('scheme');\n\t\t\t\tschemeAttribute.value = data.scheme ? data.scheme : 'client_light';\n\t\t\t\tdocument.body.attributes.setNamedItem(schemeAttribute);\n\t\t\t}\n\t\t});\n\t\tasync function fetchData() {\n\t\t\tconst user = await bridge.send('VKWebAppGetUserInfo');\n\t\t\tsetUser(user);\n\t\t\tsetPopout(null);\n\t\t}\n\t\tfetchData();\n\t}, []);\n\n\tconst go = e => {\n\t\tsetActivePanel(e.currentTarget.dataset.to);\n\t};\n\n\tconst onStoryChange = e => {\n\t\tsetActiveStory(e.currentTarget.dataset.story);\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<meta\n\t\t\t\tname=\"viewport\"\n\t\t\t\tcontent=\"width=device-width, initial-scale=1, shrink-to-fit=no, user-scalable=no, viewport-fit=cover\"\n\t\t\t></meta>\n\t\t\t<ApolloProvider client={client}>\n\t\t\t\t<Epic activeStory={activeStory} tabbar={\n\t\t\t\t\t<Tabbar>\n\t\t\t\t\t\t<TabbarItem\n\t\t\t\t\t\t\tonClick={onStoryChange}\n\t\t\t\t\t\t\tselected={activeStory === 'projects-my'}\n\t\t\t\t\t\t\tdata-story=\"projects-my\"\n\t\t\t\t\t\t\ttext=\"Мои\"\n\t\t\t\t\t\t><Icon28BombOutline /></TabbarItem>\n\t\t\t\t\t\t<TabbarItem\n\t\t\t\t\t\t\tonClick={onStoryChange}\n\t\t\t\t\t\t\tselected={activeStory === 'projects-near'}\n\t\t\t\t\t\t\tdata-story=\"projects-near\"\n\t\t\t\t\t\t\ttext=\"Рядом\"\n\t\t\t\t\t\t><Icon28PlaceOutline /></TabbarItem>\n\t\t\t\t\t\t<TabbarItem\n\t\t\t\t\t\t\tonClick={onStoryChange}\n\t\t\t\t\t\t\tselected={activeStory === 'projects-friends'}\n\t\t\t\t\t\t\tdata-story=\"projects-friends\"\n\t\t\t\t\t\t\ttext=\"Друзья\"\n\t\t\t\t\t\t><Icon28GhostOutline /></TabbarItem>\n\n\t\t\t\t\t</Tabbar>\n\t\t\t\t} >\n\t\t\t\t\t<View id=\"projects-my\" activePanel=\"projects\">\n\t\t\t\t\t\t<ProjectCardList id=\"projects\" go={go} />\n\t\t\t\t\t</View>\n\t\t\t\t\t<View id=\"projects-near\" activePanel=\"projects\">\n\t\t\t\t\t\t<ProjectCardList id=\"projects\" go={go} />\n\t\t\t\t\t</View>\n\t\t\t\t\t<View id=\"projects-friends\" activePanel=\"projects\">\n\t\t\t\t\t\t<ProjectCardList id=\"projects\" go={go} />\n\t\t\t\t\t</View>\n\n\t\t\t\t</Epic>\n\t\t\t</ApolloProvider>\n\t\t</>\n\t);\n}\n\nexport default App;\n\n","import \"core-js/features/map\";\nimport \"core-js/features/set\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport bridge from \"@vkontakte/vk-bridge\";\nimport App from \"./App\";\n\n// Init VK  Mini App\nbridge.send(\"VKWebAppInit\");\n\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nif (process.env.NODE_ENV === \"development\") {\n  import(\"./eruda\").then(eruda => {}); //runtime download\n}\n"],"sourceRoot":""}